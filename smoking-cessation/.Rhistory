dat[1,]
table(dat$num)
predictors <- c("num", "cp", "thal", "oldpeak", "age")
predictors <- c("num", "cp", "thal", "oldpeak", "chol", "age")
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors]),
label = train_task_h$target_names)
library(xgboost)
predictors <- c("num", "cp", "thal", "oldpeak", "chol", "age")
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors]),
label = train_task_h$target_names)
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors,with=F]),
label = train_task_h$target_names)
train_task_h$target_names
predictors <- setdiff(
colnames(train_task_h$data()),
train_task_h$target_names)
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors,with=F]),
label = train_task_h$data()[,train_task_h$target_names,with=F])
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors,with=F]),
label = as.vector(train_task_h$data()[,train_task_h$target_names,with=F]))
as.vector(train_task_h$data()[,train_task_h$target_names,with=F])
train_task_h$data()[[train_task_h$target_names]]
sign(train_task_h$data()[[train_task_h$target_names]]=="H")
dtrain <- xgb.DMatrix(
data.matrix(train_task_h$data()[,predictors,with=F]),
label=sign(train_task_h$data()[[train_task_h$target_names]]=="H"))
fit <- xgb.train(
params = list(learning_rate = 0.1, objective = "reg:squarederror"),
data = dtrain,
nrounds = 65L
)
dtrain
dtrain[1,]
class(dtrain)
colnames(dtrain)
shp <- shapviz(
fit,
X_pred = dtrain,
X = dtrain)
shp <- shapviz(
fit,
X_pred = as.matrix(dtrain),
X = as.matrix(dtrain))
dat = data.matrix(train_task_h$data()[,predictors,with=F])
target = sign(train_task_h$data()[[train_task_h$target_names]]=="H")
dtrain <- xgb.DMatrix(dat, label=target)
fit <- xgb.train(
params = list(learning_rate = 0.1, objective = "reg:squarederror"),
data = dtrain,
nrounds = 65L
)
shp <- shapviz(fit, X_pred=dat, X=dat)
sv_importance(shp, kind = "beeswarm")
filename <- "FOF1_3a.dta"
path <- "//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data/Current/Clinic/Adult"
library(haven)
x = read_stata(file.path(path, filename))
library(alspac)
setDataDir(path)
setDataDir("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data/")
dim(x)
x[1:5,1:5]
varnames = findVars("ff1a006")
varnames
dat = extractVars(varnames)
table(dat$ff1a006)
beta <- matrix(rnorm(200),ncol=10,nrow=20)
beta <- matrix(rnorm(200),ncol=10,nrow=20)
traits <- data.frame(smoking=sample(c("no","yes"),20))
beta <- matrix(rnorm(200),ncol=10,nrow=20)
traits <- data.frame(smoking=sample(c("no","yes"),20,replace=T))
library(ggplot2)
# identify the 1000 most variable probes
o <- order(rowVars(betas), decreasing = TRUE)[1:1000]
library(matrixStats)
# identify the 1000 most variable probes
o <- order(rowVars(betas), decreasing = TRUE)[1:1000]
# calculate Euclidean distances between all pairs of samples
d <- dist(t(betas[o,]))
betas <- matrix(rnorm(200),ncol=10,nrow=20)
traits <- data.frame(smoking=sample(c("no","yes"),20,replace=T))
# identify the 1000 most variable probes
o <- order(rowVars(betas), decreasing = TRUE)[1:1000]
# calculate Euclidean distances between all pairs of samples
d <- dist(t(betas[o,]))
# apply multi-dimensional scaling to the distances
mds <- data.frame(smoking=traits$smoking, cmdscale(d))
# plot the results and color by smoking status
ggplot(mds, aes(x=mds[,2], y=mds[,3], color=smoking)) +
geom_point()
mds[1,]
# identify the 1000 most variable probes
o <- order(rowVars(betas), decreasing = TRUE)[1:1000]
# calculate Euclidean distances between all pairs of samples
d <- dist(t(betas[o,]))
# apply multi-dimensional scaling to the distances
mds <- cmdscale(d)
colnames(mds) <- paste0("mds",1:2)
# apply multi-dimensional scaling to the distances
mds <- cmdscale(d)
colnames(mds) <- paste0("mds",1:2)
mds <- data.frame(smoking=traits$smoking, mds)
# plot the results and color by smoking status
ggplot(mds, aes(x=mds1, y=mds2, color=smoking)) +
geom_point()
getwd()
path <- "../Downloads/dnamage.csv"
path <- "../Downloads/dnamage.csv"
dnamage <- read.csv(path)
getwd9)
getwd9)
getwd()
path <- "../../Downloads/dnamage.csv"
dnamage <- read.csv(path)
x <- read.csv("../../Downloads/dnamage-alnqlet.csv")
dnamage[1,]
x[1:5,]
table(x$time_point)
x[1,]
table(x$time_point)
dnamage <- read.csv("../../Downloads/dnamage-alnqlet.csv")
library(alspac)
setDataDir("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data")
vars <- findVars(c("mum_in_alsp","partner_in_alspac","in_alsp"))
vars
dat <- extractVars(vars, vars[vars$name=="mum_in_alsp",,drop=F])
traceback()
exclusions <- readExclusions()
exclusions
exclusions$child <- union(exclusions$child_based, exclusions$child_completed)
exclusions <- readExclusions()
table(unlist(exclusions))
exclusions <- readExclusions()
aln <- unlist(exclusions)
exclusions <- readExclusions()
exclusions <- unlist(exclusions)
dnamage[1,]
table(gsub("[0-9]*", "", dnamage$alnqlet))
sum(table(gsub("[0-9]*", "", dnamage$alnqlet)))
nrow(dnamage)
sum(gsub("[A-Z]+", "", dnamage$alnqlet) %in% exclusions)
idx <- which(gsub("[A-Z]+", "", dnamage$alnqlet) %in% exclusions)
idx
dnamage[idx,c("time_point")]
dnamage[idx,c("time_point","chip")]
dnamage <- dnamage[-idx,]
idx <- which(gsub("[A-Z]+", "", dnamage$alnqlet) %in% exclusions)
idx
getwd()
vars <- findVars(c("mum_in_alsp","partner_in_alspac","in_alsp"))
dat <- extractVars(vars, exclude_withdrawn = TRUE, core_only=TRUE)
dat[1,]
table(dat$woc_mother)
dat[which(dat$woc_mother)[1:5],]
table(dat$in_c)
table(dat$partner_in_alspac)
vars <- findVars(c("mum_in_alsp","partner_in_alspac","tripquad"))
dat <- extractVars(vars, exclude_withdrawn = TRUE, core_only=TRUE)
dat[1,]
vars
vars <- findVars(c("mum_in_alsp","partner_in_alspac","kz011b"))
dat <- extractVars(vars, exclude_withdrawn = TRUE, core_only=TRUE)
dim(dat)
dat[1,]
table(dat$in_core)
dat[which(dat$in_core==2)[1:5],]
table(dat$mum_in_core)
exclusions <- readExclusions()
exclusions <- unlist(exclusions)
dat <- dat[!dat$aln %in% exclusions,]
nrow(dat)
table(dat$woc_child_based)
table(dat$woc_child_completed)
table(dat$woc_mother)
dat[1,]
table(dat$in_a)
table(dat$mum_enrol_status)
table(dat$mum_and_preg_enrolled)
table(dat$mum_and_preg_enrolled)
with(dat, table(mum_and_preg_enrolled,mum_enrolled))
with(dat, table(mum_and_preg_enrolled,mum_enrol_status))
with(dat, table(mum_and_preg_enrolled,mum_enrol_status,preg_enrol_status))
with(dat, table(mum_enrol_status,preg_enrol_status,mum_and_preg_enrolled))
dat <- dat[!dat$aln %in% exclusions,]
dat <- dat[dat$mum_enrol_status==1 & dat$preg_enrol_status==1,]
dim(dat)
dat[1,]
table(dat$mum_in_core)
table(dat$preg_in_core)
length(idx)
dnamage <- read.csv("../../Downloads/dnamage-alnqlet.csv")
keep <- gsub("[A-Z]+", "", dnamage$alnqlet) %in% dat$aln
table(keep)
with(dnamage[!keep,], table(time_point,chip))
with(dnamage, table(time_point,chip))
dnamage <- dnamage[keep,,drop=F]
write.csv(dnamage, file="dnamage-clean-20230503.csv")
readLines("dnamage-clean-20230503.csv",5)
readLines("dnamage-clean-20230503.csv",1)
readLines("dnamage-clean-20230503.csv",2)
write.csv(dnamage, file="dnamage-clean-20230503.csv",row.names=F)
readLines("dnamage-clean-20230503.csv",2)
x <- read.csv("dnamage-clean-20230503.csv")
x[1:5,1:5]
quantile(x$DNAmAge)
quantile(x$Age)
cor(x$age, x$DNAmAge)
cor(x$Age, x$DNAmAge)
Sys.date()
Sys.Date()
Sys.Date
?Sys.Date
format(Sys.Date(), "%Y%m%d")
q('n')
q()
library(devtools)
install.packages("explodecomputer/alspac")
install_github("explodecomputer/alspac")
library(alspac)
setDataDir("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data")
createDictionary()
haven::read_dta("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data/Current/Other/Longitudinal/MRI_YP_2b.dta")
library(readstata13)
x <- read.dta13("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data/Current/Other/Longitudinal/MRI_YP_2b.dta")
alspac::createDictionary
alspac:::processDTA
alspac:::createFileTable
myCreateDictionary <- function (datadir = "Current", name = NULL, quick = F) {
stopifnot(datadir == "Current")
alspacdir <- options()$alspac_data_dir
datadir <- file.path(alspacdir, datadir)
files <- list.files(datadir, pattern = "dta$", full.names = T,
recursive = T, ignore.case = T)
dictionary <- mclapply(files, function(file) {
cat(date(), "loading", file, "\n")
tryCatch({
merge(
alspac:::processDTA(file, quick),
alspac:::createFileTable(file, alspacdir), by = "obj")
}, error=function(e) {
warning("Error loading", file, "\n")
print(e)
NULL
})
}) %>% bind_rows
dictionary <- dictionary[which(dictionary$counts > 0), ]
dictionary <- addSourcesToDictionary(dictionary)
if (!is.null(name))
saveDictionary(name, dictionary)
invisible(dictionary)
}
myCreateDictionary <- function (datadir = "Current", name = NULL, quick = F) {
stopifnot(datadir == "Current")
alspacdir <- options()$alspac_data_dir
datadir <- file.path(alspacdir, datadir)
files <- list.files(datadir, pattern = "dta$", full.names = T,
recursive = T, ignore.case = T)
dictionary <- mclapply(files, function(file) {
cat(date(), "loading", file, "\n")
tryCatch({
merge(
alspac:::processDTA(file, quick),
alspac:::createFileTable(file, alspacdir), by = "obj")
}, error=function(e) {
warning("Error loading", file, "\n")
print(e)
NULL
})
}) %>% bind_rows
dictionary <- dictionary[which(dictionary$counts > 0), ]
dictionary <- alspac:::addSourcesToDictionary(dictionary)
if (!is.null(name))
alspac:::saveDictionary(name, dictionary)
invisible(dictionary)
}
myCreateDictionary()
load("~/GitHub/alspac/data/current.rdata")
ls()
alspac::dictionaryGood()
alspac::dictionaryGood("current")
current.new <- myCreateDictionary()
dim(current)
dim(current.new)
x <- setdiff(current.new$obj, current$obj)
length(x0)
length(x)
x
y <- setdiff(current$obj, current.new$obj)
length(y)
y
setdiff(current$name, current.new$name)
setdiff(current.new$name, current$name)
updateDictionaries(\)
updateDictionaries
x <- haven::read_dta("//ads.bris.ac.uk/filestore/SSCM ALSPAC/Data/Current/Other/Longitudinal/MRI_YP_2b.dta")
x[1:5,1;5]
x[1:5,1:5]
x[1:5,]
x[which(x$MRI_YP_0001 > 0)[1:5],]
x1 <- rnorm(100)
x2 <- rnorm(100)
y <- x1 + x2 + rnorm(100)
fit <- lm(y ~ x1 + x2)
summary(fit)
summary(fit)$fstatistic
summary(fit)$fstatistic['value']
summary(fit)$fstatistic$value
summary(fit)$fstatistic[['value']]
x <- sample(0:2,size=1000,replace=T)
x <- sample(0:2,size=1000,replace=T)
y <- 5 + 2*x + rnorm(1000)
coef(lm(y~x))
coef(lm(y~-1+x))
y <- scale(y)
coef(lm(y~-1+x))
coef(lm(y~x))
y <- 5 + 2*x + rnorm(1000)
coef(summary(lm(y~x)))
coef(summary(lm(y~-1+x)))
y <- scale(x)
coef(summary(lm(y~-1+x)))
y <- scale(x)
y <- 5 + 2*x + rnorm(1000)
coef(summary(lm(y~x)))
coef(summary(lm(y~-1+x)))
y <- scale(y)
coef(summary(lm(y~x)))
coef(summary(lm(y~-1+x)))
x <- sample(0:2,size=1000,replace=T)
g1 <- rnorm(1000)
g2 <- g1 + rnorm(1000)
g3 <- g1 + rnorm(1000)
g4 <- g1 + rnorm(1000)
quantile(g1,probs=c(0.33,0.66))
g1 <- ifelse(g1 < -0.4, 0, ifelse(g1 < 0.4, 1, 2))
table(g1)
g2 <- ifelse(g2 < -0.4, 0, ifelse(g2 < 0.4, 1, 2))
g3 <- ifelse(g3 < -0.4, 0, ifelse(g3 < 0.4, 1, 2))
g4 <- ifelse(g4 < -0.4, 0, ifelse(g4 < 0.4, 1, 2))
cor(cbind(g1,g2,g3,g4))
y <- g1 + 2*g2 + 3*g3 + 4*g4 + rnorm(1000)
cor(cbind(g1,g2,g3,g4,y))
w <- runf(1000,0,1)
w <- runif(1000,0,1)
fit <- lm(y ~ -1 + g1 + g2 + g3 + g4, weights=w)
coef(summary(fit))[1:10,]
coef(summary(fit))
fit <- lm(y ~ -1 + g1,weights=w)
coef(summary(fit))
cor(y, g1*w)
s <- w*g1
coef(summary(lm(y~-1+s)))
coef(summary(lm(y~s)))
coef(summary(lm(y~0+s)))
coef(summary(lm(y ~ -1 + g1,weights=w)))
coef(summary(lm(y ~ g1,weights=w)))
coef(summary(lm(y ~ 0 + g1,weights=w)))
bg <- rnorm(100)
w <- runif(100,0,1)
coef(summary(lm(y ~ -1 + g1,weights=w)))
bg <- rnorm(100)
w <- runif(100,0,1)
coef(summary(lm(y ~ -1 + g1,weights=w)))
bg <- rnorm(100)
yg <- bg * rnorm(100,sd=2)
w <- runif(100)
coef(summary(lm(yg~-1+bg,weights=w)))
est <- yg/bg*w
sum(est)
coef(summary(lm(yg~bg,weights=w)))
coef(summary(lm(yg~0+bg,weights=w)))
est <- yg/bg*w/sum(w)
est
sum(est)
est <- yg/bg*w
sum(w)
sum(yg/bg)
sum(w*yg/bg)
mean(w*yg/bg)
sum(w*yg/bg)
sum(w/sum(w)*yg/bg)
coef(summary(lm(yg~-1+bg,weights=w)))
coef(summary(lm(yg~0+bg,weights=w)))
sum(w*yg/bg)/sum(w)
0.8416955/(sum(w*yg/bg)/sum(w))
coef(summary(lm(yg~0+bg)))
sum(yg/bg)
mean(yg/bg)
length(yg)
coef(summary(lm(yg~bg)))
sum(yg/bg)
coef(summary(lm(yg~-1+bg)))
cor(yg,bg)
coef(summary(lm(yg~0+bg)))
sum(bg/yg)
mean(bg/yg)
mean(yg/bg)
quantile(bg)
quantile(yg)
ygs <- scale(yg)
bgs <- scale(bgs)
bgs <- scale(bg)
coef(summary(lm(ygs~0+bgs)))
mean(ygs/bgs)
coef(summary(lm(ygs~bgs)))
coef(summary(lm(ygs~0+bgs)))[1,2]
ls()
library(remotes)
remotes::install_github("danbelsky/DunedinPACE")
library(DunedinPACE)
getRequiredProbes()
getRequiredProbes
mPACE_Models[1:5,]
mPACE_Models$model_probes
mPACE_Models$model_weights
all(names(mPACE_Models$model_weights)==mPACE_Models$model_names)
mPACE_Models$model_weights)
mPACE_Models$model_weights
model <- mPACE_Models$model_weights
write.csv(
data.frame(
cpg=names(model),
coef=model),
file="pace-model.csv",
row.names=F
)
getwd()
names(model)
model
class(model)
names(model$DunedinPACE)
class(model$DunedinPACE)
(model$DunedinPACE)
names(model)
model <- mPACE_Models$model_weights$DunedinPACE
setwd("GitHub/dnam-lung-cancer-screening-panel/dunedin-pace/")
model <- mPACE_Models$model_weights$DunedinPACE
write.csv(
data.frame(
cpg=names(model),
coef=model),
file="pace-model.csv",
row.names=F
)
write.csv(
data.frame(
cpg=names(model),
coef=model),
file="pace-model.csv",
row.names=F
)
setwd("../episcores/")
table1e <- read.csv("table1e.csv")
table1e[1,]
table1e <- read.csv("table1e.csv")
proteins <- c(
"OSM", "EN-RAGE", "CXCL9", "VEGFA",
"TGF-alpha", "IGFBP-1", "MMP12", "HGF")
table(table1e$gene %in% proteins)
table1e <- table1e[table1e$gene %in% proteins,]
table(table1e$gene)
table1e <- read.csv("table1e.csv")
table(table1e$gene)
grep("RAGE",table1e$gene)
grep("EN",table1e$gene)
table1e$gene[grep("EN",table1e$gene)]
which(table(table1e$gene)==82)
table1e <- read.csv("table1e.csv")
proteins <- c(
"OSM", "S100A12", "CXCL9", "VEGFA",
"TGFA", "IGFBP1", "MMP12", "HGF")
table1e <- table1e[table1e$gene %in% proteins,]
table(table1e$gene)
table1e[1,]
table1e <- read.csv("table1e.csv")
proteins <- c(
"OSM", "S100A12", "CXCL9", "VEGFA",
"TGFA", "IGFBP1", "MMP12", "HGF")
table1e <- table1e[table1e$gene %in% proteins,]
table(table1e$gene)
#CXCL9     HGF  IGFBP1   MMP12     OSM S100A12    TGFA   VEGFA
#   56      72     120     257     125      82     100     159
write.csv(table1e, file="episcore-sites.csv")
nrow(table1e)
setwd("../smoking-cessation")
library(readxl)
guida <- readxl::read_xlsx("guida_supplement.xlsx")
guida <- readxl::read_xlsx("guida_supplement.xlsx")
dim(guida)
guida[1,]
colnames(guida)
colnames(guida) <- c("cpg","chr","pos","gene","gene.region","cgi.region","direction","time")
table(guida$time)
sum(guida$time==10)
sum(guida$time==15)
sum(guida$time==20)
colnames(guida) <- c("cpg","chr","pos","gene","gene.region","cgi.region","direction","time")
guida <- guida[guida$time %in% c(10,15,20),]
dim(guida)
table(guida$time)
#10 15 20
#36 33 27
write.csv(guida, file="guida-sites.csv", row.names=F)
?read_xlsx
library(liftOver)
BiocManager::install("liftOver")
library(liftOver)
